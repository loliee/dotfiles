#!/usr/bin/env bash

set -f

# HOMEBREW options
export HOMEBREW_CASK_OPTS="--appdir=${HOME}/Applications --fontdir=/Library/Fonts --no-binaries"
export HOMEBREW_NO_ANALYTICS=1
export HOMEBREW_NO_INSECURE_REDIRECT=1
export PATH="${HOME}/.homebrew/bin:${PATH}"

# RUN_GROUP_LIST group of package to install, default to 'base, dev, dotfiles, messaging, multimedia, privacy'
RUN_LIST=${RUN_LIST:-'base,dev,dotfiles,messaging,multimedia,privacy'}

if [[ ! -f ~/.homebrew/bin/brew ]]; then
  echo '--> Installing homebrew...'
  mkdir -p ~/.homebrew &&
    chmod 0700 ~/.homebrew &&
    curl -L https://github.com/Homebrew/brew/tarball/master |
    tar xz --strip 1 -C ~/.homebrew
fi

trap 'brew cleanup' INT TERM HUP EXIT

echo "--> Make sure we're using the latest Homebrew"
brew update

echo '--> Upgrade any already-installed formulae'
brew upgrade

echo '--> Tap extras Homebrew repositories'
brew tap homebrew/services

# -----------------------------------------------------------
# Dotfiles - install required dotfiles packages
# -----------------------------------------------------------

if [[ ${RUN_LIST} =~ dotfiles ]]; then
  brew install \
    git \
    neovim \
    stow
fi

# -----------------------------------------------------------
# Base - install mandatory packages
# -----------------------------------------------------------

if [[ ${RUN_LIST} =~ base ]]; then

  brew tap homebrew/cask-fonts
  brew tap tldr-pages/tldr

  echo '--> Install base casks/packages'
  brew install --cask \
    font-iosevka \
    firefox \
    gpg-suite \
    istat-menus \
    iterm2 \
    homebrew/cask-versions/adoptopenjdk8 \
    keepassx \
    the-unarchiver \
    tunnelblick \
    xquartz

  brew install \
    advancecomp \
    ansifilter \
    bash \
    coreutils \
    curl \
    fd \
    findutils \
    fzf \
    git \
    gnu-sed \
    gnu-tar \
    gnu-time \
    gnu-which \
    grep \
    gsl \
    moreutils \
    ncdu \
    openssh \
    openssl \
    pigz \
    pwgen \
    readline \
    reattach-to-user-namespace \
    rg \
    ssh-copy-id \
    ikuwow/ikuwow-sshrc/sshrc \
    stow \
    tag \
    tflint \
    tfsec \
    terminal-notifier \
    tmux \
    tree \
    watch \
    wget \
    xz \
    zopfli \
    zoxide \
    zsh-syntax-highlighting \
    zsh \
    tldr
fi

# -----------------------------------------------------------
# Dev - install ops/dev packages
# -----------------------------------------------------------

if [[ ${RUN_LIST} =~ dev ]]; then

  brew tap wagoodman/dive

  echo '--> Install dev casks/packages'

  brew install --cask \
    1password \
    docker \
    little-snitch \
    micro-snitch \
    vagrant \
    virtualbox

  brew install \
    asciinema \
    direnv \
    bat \
    bfg \
    chruby \
    cloc \
    closure-compiler \
    diff-so-fancy \
    dive \
    dust \
    entr \
    fnm \
    kubectx \
    kubernetes-cli \
    kubernetes-helm \
    go \
    gawk \
    hub \
    ipcalc \
    hadolint \
    jq \
    libxml2 \
    minio-mc \
    mkcert \
    mtr \
    nmap \
    parallel \
    packer \
    pandoc \
    pgcli \
    pyenv \
    pyenv-virtualenv \
    pyenv-virtualenvwrapper \
    pv \
    qemu \
    ruby-build \
    rustup \
    shellcheck \
    skopeo \
    shfmt \
    tag \
    tig \
    tcpdump \
    tcptraceroute \
    terraform \
    terraform-inventory \
    xz \
    yamllint

  # Force link because already installed by moreutils formula
  brew install --force parallel

  # Python
  PYTHONS=(
    3.11.6
  )

  for python in "${PYTHONS[@]}"; do
    CFLAGS="-I$(brew --prefix openssl)/include -I$(brew --prefix bzip2)/include -I$(brew --prefix readline)/include -I$(xcrun --show-sdk-path)/usr/include" \
    LDFLAGS="-L$(brew --prefix openssl)/lib -L$(brew --prefix readline)/lib -L$(brew --prefix zlib)/lib -L$(brew --prefix bzip2)/lib" \
      pyenv install -s "${python}"
  done

  PIPS=(
    ansible-lint
    autopep8
    bandit
    black
    docutils
    fabric
    flake8
    ipython
    isort
    pre-commit
    pylint
    virtualenv
  )

  rm -f ~/.python-version
  echo "${PYTHONS[@]: -1}" >~/.python-version

  "${HOME}/.pyenv/shims/pip" install --upgrade pip

  for pip in "${PIPS[@]}"; do
    "${HOME}/.pyenv/shims/pip" list -l | grep "$pip" &>/dev/null ||
      "${HOME}/.pyenv/shims/pip" install "$pip"
  done

  eval "$(pyenv init -)"

  # Guess python version from program name
  git clone git://github.com/concordusapps/pyenv-implict.git \
    "${HOME}/.pyenv/plugins/pyenv-implict"

  # Ruby
  mkdir -p ~/.rubies
  RUBIES=(
    3.2.2
  )

  for ruby in "${RUBIES[@]}"; do
    "${HOME}/.homebrew/bin/ruby-build" "$ruby" "${HOME}/.rubies/ruby-${ruby}"
  done

  rm -f ~/.ruby-version
  echo "${RUBIES[@]: -1}" >~/.ruby-version

  GEMS=(
    bundler
    mdl
    serverspec
    tmuxinator
  )

  # shellcheck source=/dev/null
  source "$(brew --prefix)/share/chruby/chruby.sh"
  chruby "$(cat ~/.ruby-version)"

  for gem in "${GEMS[@]}"; do
    gem list -i "${gem}" &>/dev/null || gem install "${gem}"
  done

  # Node
  NODEJS=(
    20.9.0
  )

  eval "$(fnm env --multi)"
  for node in "${NODEJS[@]}"; do
    fnm install "${node}"
  done

  fnm default "${NODEJS[-1]}"
  fnm use "${NODEJS[-1]}"

  NPM=(
    eslint@8
    prettier@3
  )

  for npm in "${NPM[@]}"; do
    npm install -g "$npm"
  done

  # Rust
  rustup-init -y --no-modify-path
  rustup component add rustfmt

  # Zsh missing completions
  for binary_name in docker docker-compose docker-machine; do
    [[ -f "/Applications/Docker.app/Contents/Resources/etc/${binary_name}.zsh-completion" ]] &&
      ln -sf "/Applications/Docker.app/Contents/Resources/etc/${binary_name}.zsh-completion" \
        "$(brew --prefix)/share/zsh/site-functions/_${binary_name}"
  done
fi

# -----------------------------------------------------------
# Messaging - install communication packages
# -----------------------------------------------------------

if [[ ${RUN_LIST} =~ messaging ]]; then

  echo '--> Install messaging casks'

  brew install --cask \
    mattermost \
    signal \
    slack
fi

# -----------------------------------------------------------
# Multimedia - install multimedia packages
# -----------------------------------------------------------

if [[ ${RUN_LIST} =~ multimedia ]]; then

  echo '--> Install multimedia cask/packages'

  brew install --cask \
    imageoptim \
    transmission \
    vlc

  brew install \
    gifsicle \
    jhead \
    jpeg \
    jpegoptim \
    optipng \
    pngcrush \
    pngquant \
    webkit2png
fi
